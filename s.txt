GetMapping("/status-report")
    public String statusReport(@RequestParam(value = "status", required = false) Enrollment.Status status,
                               @RequestParam(value = "user", required = false) String user,
                               @RequestParam(value = "env", required = false) String env,
                               @RequestParam(value = "completedFrom", required = false)
                                   @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate completedFrom,
                               @RequestParam(value = "completedTo", required = false)
                                   @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate completedTo,
                               @RequestParam(value = "minMinutes", required = false) Integer minMinutes,
                               @RequestParam(value = "maxMinutes", required = false) Integer maxMinutes,
                               @RequestParam(value = "page", required = false, defaultValue = "0") int page,
                               @RequestParam(value = "size", required = false, defaultValue = "25") int size,
                               Model model) {
        // enforce max page size of 25
        if (size > 25) size = 25;
        if (size < 1) size = 1;
        var pageResult = service.searchAdvanced(status, user, env, completedFrom, completedTo, minMinutes, maxMinutes, page, size)
                .map(StatusReportRow::new);
        DateTimeFormatter df = DateTimeFormatter.ISO_DATE;
        model.addAttribute("fromStr", completedFrom != null ? df.format(completedFrom) : null);
        model.addAttribute("toStr", completedTo != null ? df.format(completedTo) : null);
        model.addAttribute("status", status);
        model.addAttribute("user", user);
        model.addAttribute("env", env);
        model.addAttribute("minMinutes", minMinutes);
        model.addAttribute("maxMinutes", maxMinutes);
        model.addAttribute("rows", pageResult.getContent());
        model.addAttribute("page", pageResult.getNumber());
        model.addAttribute("size", pageResult.getSize());
        model.addAttribute("totalPages", pageResult.getTotalPages());
        model.addAttribute("totalElements", pageResult.getTotalElements());
        return "status-report";
    }
 public Page<Enrollment> searchAdvanced(Enrollment.Status status, String userId, String environment,
                                           LocalDate completedFrom, LocalDate completedTo,
                                           Integer minMinutes, Integer maxMinutes,
                                           int page, int size) {
        LocalDateTime compFrom = completedFrom != null ? completedFrom.atStartOfDay() : null;
        LocalDateTime compTo = completedTo != null ? completedTo.atTime(LocalTime.MAX) : null;
        String u = (userId != null && !userId.isBlank()) ? userId : null;
        String env = (environment != null && !environment.isBlank()) ? environment : null;
        Page<Enrollment> base = repository.findByAdvancedFilters(status, u, env, compFrom, compTo, PageRequest.of(page, size));
        if (minMinutes == null && maxMinutes == null) return base;
        List<Enrollment> filtered = base.getContent().stream().filter(e -> {
            if (e.getCompletedAt() == null || e.getCreatedAt() == null) return false;
            long minutes = java.time.Duration.between(e.getCreatedAt(), e.getCompletedAt()).toMinutes();
            if (minMinutes != null && minutes < minMinutes) return false;
            if (maxMinutes != null && minutes > maxMinutes) return false;
            return true;
        }).toList();
        return new org.springframework.data.domain.PageImpl<>(filtered, PageRequest.of(page, size), base.getTotalElements());
    }


  @Query("select e from Enrollment e where (:status is null or e.status = :status) and (:userId is null or lower(e.userId) like lower(concat('%', :userId, '%'))) and (:environment is null or lower(e.environment) like lower(concat('%', :environment, '%'))) and (:completedFrom is null or e.completedAt >= :completedFrom) and (:completedTo is null or e.completedAt <= :completedTo) order by e.createdAt desc")
    Page<Enrollment> findByAdvancedFilters(@Param("status") Enrollment.Status status,
                                           @Param("userId") String userId,
                                           @Param("environment") String environment,
                                           @Param("completedFrom") LocalDateTime completedFrom,
                                           @Param("completedTo") LocalDateTime completedTo,
                                           Pageable pageable);
